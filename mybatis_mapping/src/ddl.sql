CREATE TABLE BLOG(
	BLOG_ID NUMBER PRIMARY KEY,
	BLOG_TITLE NVARCHAR2(200) NOT NULL,
	BLOG_AUTHOR_ID NUMBER,
	FOREIGN KEY (BLOG_AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID)
);

CREATE TABLE AUTHOR(
	AUTHOR_ID NUMBER PRIMARY KEY,
	AUTHOR_USERNAME NVARCHAR2(200) NOT NULL,
	AUTHOR_PASSWORD VARCHAR2(200) NOT NULL,
	AUTHOR_EMAIL VARCHAR2(200),
	AUTHOR_BIO VARCHAR2(200),
	AUTHOR_FAVOURITE_SECTION VARCHAR2(200)
);


CREATE TABLE POST(
	POST_ID NUMBER PRIMARY KEY,
	POST_SUBJECT VARCHAR2(200),
	POST_CREATED_ON TIMESTAMP,
	POST_SECTION VARCHAR2(200),
	POST_BODY VARCHAR2(200),
	DRAFT NUMBER,
	POST_AUTHOR_ID NUMBER,
	POST_BLOG_ID NUMBER,
	FOREIGN KEY (POST_AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID),
	FOREIGN KEY (POST_BLOG_ID) REFERENCES BLOG(BLOG_ID)
);

CREATE TABLE COMM(
	COMMENT_ID NUMBER PRIMARY KEY,
	COMMENT_NAME VARCHAR2(200),
	COMMENT_TEXT VARCHAR2(200),
	POST_ID NUMBER,
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID)
);

CREATE TABLE TAG(
	TAG_ID NUMBER PRIMARY KEY,
	TAG_NAME VARCHAR2(200),
	POST_ID NUMBER,
	FOREIGN KEY (POST_ID) REFERENCES POST(POST_ID)
);

CREATE TABLE POST_TAG(
	POST_ID NUMBER,
	TAG_ID NUMBER,
	FOREIGN KEY(POST_ID) REFERENCES POST(POST_ID),
	FOREIGN KEY(TAG_ID) REFERENCES TAG(TAG_ID)
);

CREATE SEQUENCE SEQ_BLOG;
CREATE SEQUENCE SEQ_AUTHOR;
CREATE SEQUENCE SEQ_COMM;
CREATE SEQUENCE SEQ_POST;
CREATE SEQUENCE SEQ_TAG;

INSERT INTO AUTHOR VALUES(SEQ_AUTHOR.NEXTVAL, '작성자', '1234', 'a@a.com', 'bio', 'favourite_section');
INSERT INTO BLOG VALUES(SEQ_BLOG.NEXTVAL, '블로그제목', 1);
INSERT INTO POST VALUES(SEQ_POST.NEXTVAL, 'subject', SYSTIMESTAMP, 'section', 'body', 2, 1, 1);
INSERT INTO COMM VALUES(SEQ_COMM.NEXTVAL, '댓글이름', '댓글 내용', 1);
INSERT INTO TAG VALUES(SEQ_TAG.NEXTVAL, 'tag이름', 1);


-- AUTHOR
INSERT INTO AUTHOR (AUTHOR_ID, AUTHOR_USERNAME, AUTHOR_PASSWORD, AUTHOR_EMAIL, AUTHOR_BIO, AUTHOR_FAVOURITE_SECTION)
VALUES (SEQ_AUTHOR.NEXTVAL, 'alice',  'alicepw', 'alice@example.com',  N'백엔드 개발자',   N'Java');

INSERT INTO AUTHOR (AUTHOR_ID, AUTHOR_USERNAME, AUTHOR_PASSWORD, AUTHOR_EMAIL, AUTHOR_BIO, AUTHOR_FAVOURITE_SECTION)
VALUES (SEQ_AUTHOR.NEXTVAL, 'bob',    'bobpw',   'bob@example.com',    N'데이터 과학자',   N'ML');

INSERT INTO AUTHOR (AUTHOR_ID, AUTHOR_USERNAME, AUTHOR_PASSWORD, AUTHOR_EMAIL, AUTHOR_BIO, AUTHOR_FAVOURITE_SECTION)
VALUES (SEQ_AUTHOR.NEXTVAL, 'charlie','charliepw','charlie@example.com',N'풀스택 엔지니어', N'Cloud');


-- BLOG
INSERT INTO BLOG (BLOG_ID, BLOG_TITLE, BLOG_AUTHOR_ID)
VALUES (SEQ_BLOG.NEXTVAL, N'Alice의 Devlog',
        (SELECT AUTHOR_ID FROM AUTHOR WHERE AUTHOR_USERNAME = 'alice'));

INSERT INTO BLOG (BLOG_ID, BLOG_TITLE, BLOG_AUTHOR_ID)
VALUES (SEQ_BLOG.NEXTVAL, N'Data Science Notes',
        (SELECT AUTHOR_ID FROM AUTHOR WHERE AUTHOR_USERNAME = 'bob'));


-- TAG
INSERT INTO TAG (TAG_ID, TAG_NAME) VALUES (SEQ_TAG.NEXTVAL, 'mybatis');
INSERT INTO TAG (TAG_ID, TAG_NAME) VALUES (SEQ_TAG.NEXTVAL, 'spring');
INSERT INTO TAG (TAG_ID, TAG_NAME) VALUES (SEQ_TAG.NEXTVAL, 'jpa');
INSERT INTO TAG (TAG_ID, TAG_NAME) VALUES (SEQ_TAG.NEXTVAL, 'oracle');
INSERT INTO TAG (TAG_ID, TAG_NAME) VALUES (SEQ_TAG.NEXTVAL, 'java');
INSERT INTO TAG (TAG_ID, TAG_NAME) VALUES (SEQ_TAG.NEXTVAL, 'ml');
INSERT INTO TAG (TAG_ID, TAG_NAME) VALUES (SEQ_TAG.NEXTVAL, 'xgboost');


-- POST (Alice의 Devlog - alice 작성)
INSERT INTO POST (
  POST_ID, POST_BLOG_ID, POST_AUTHOR_ID, POST_CREATED_ON,
  POST_SECTION, POST_SUBJECT, DRAFT, POST_BODY
)
VALUES (
  SEQ_POST.NEXTVAL,
  (SELECT BLOG_ID FROM BLOG WHERE BLOG_TITLE = N'Alice의 Devlog'),
  (SELECT AUTHOR_ID FROM AUTHOR WHERE AUTHOR_USERNAME = 'alice'),
  SYSTIMESTAMP - INTERVAL '10' DAY,
  N'Java',
  N'MyBatis Tips',
  0,
  N'매퍼 작성 요령과 resultMap 구성 팁을 정리합니다.'
);

INSERT INTO POST (
  POST_ID, POST_BLOG_ID, POST_AUTHOR_ID, POST_CREATED_ON,
  POST_SECTION, POST_SUBJECT, DRAFT, POST_BODY
)
VALUES (
  SEQ_POST.NEXTVAL,
  (SELECT BLOG_ID FROM BLOG WHERE BLOG_TITLE = N'Alice의 Devlog'),
  (SELECT AUTHOR_ID FROM AUTHOR WHERE AUTHOR_USERNAME = 'alice'),
  SYSTIMESTAMP - INTERVAL '5' DAY,
  N'Spring',
  N'Spring Boot와 JPA 연동기',
  1,  -- 초안
  N'프로젝트 설정, 엔티티 매핑, 영속성 컨텍스트를 다룹니다.'
);

-- POSTS (Data Science Notes - bob 작성)
INSERT INTO POST (
  POST_ID, POST_BLOG_ID, POST_AUTHOR_ID, POST_CREATED_ON,
  POST_SECTION, POST_SUBJECT, DRAFT, POST_BODY
)
VALUES (
  SEQ_POST.NEXTVAL,
  (SELECT BLOG_ID FROM BLOG WHERE BLOG_TITLE = N'Data Science Notes'),
  (SELECT AUTHOR_ID FROM AUTHOR WHERE AUTHOR_USERNAME = 'bob'),
  SYSTIMESTAMP - INTERVAL '2' DAY,
  N'ML',
  N'XGBoost Basics',
  0,
  N'트리 부스팅 개념과 하이퍼파라미터를 간단히 소개합니다.'
);

-- COMMENTS for 'MyBatis Tips'
INSERT INTO COMM (COMMENT_ID, POST_ID, COMMENT_NAME, COMMENT_TEXT)
VALUES (
  SEQ_COMM.NEXTVAL,
  (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'MyBatis Tips'),
  N'김철수',
  N'좋은 글 감사합니다. resultMap 부분이 특히 유용했어요.'
);

INSERT INTO COMM (COMMENT_ID, POST_ID, COMMENT_NAME, COMMENT_TEXT)
VALUES (
  SEQ_COMM.NEXTVAL,
  (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'MyBatis Tips'),
  N'이영희',
  N'컬렉션 매핑 예시도 부탁드립니다!'
);

-- COMMENTS for 'XGBoost Basics'
INSERT INTO COMM (COMMENT_ID, POST_ID, COMMENT_NAME, COMMENT_TEXT)
VALUES (
  SEQ_COMM.NEXTVAL,
  (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'XGBoost Basics'),
  N'박민수',
  N'파라미터 튜닝 파트가 기대됩니다.'
);


-- MyBatis Tips → mybatis, java, oracle
INSERT INTO POST_TAG (POST_ID, TAG_ID)
SELECT (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'MyBatis Tips'),
       (SELECT TAG_ID  FROM TAG  WHERE TAG_NAME  = 'mybatis')
FROM DUAL;

INSERT INTO POST_TAG (POST_ID, TAG_ID)
SELECT (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'MyBatis Tips'),
       (SELECT TAG_ID  FROM TAG  WHERE TAG_NAME  = 'java')
FROM DUAL;

INSERT INTO POST_TAG (POST_ID, TAG_ID)
SELECT (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'MyBatis Tips'),
       (SELECT TAG_ID  FROM TAG  WHERE TAG_NAME  = 'oracle')
FROM DUAL;

-- Spring Boot와 JPA 연동기 → spring, jpa, java
INSERT INTO POST_TAG (POST_ID, TAG_ID)
SELECT (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'Spring Boot와 JPA 연동기'),
       (SELECT TAG_ID  FROM TAG  WHERE TAG_NAME  = 'spring')
FROM DUAL;

INSERT INTO POST_TAG (POST_ID, TAG_ID)
SELECT (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'Spring Boot와 JPA 연동기'),
       (SELECT TAG_ID  FROM TAG  WHERE TAG_NAME  = 'jpa')
FROM DUAL;

INSERT INTO POST_TAG (POST_ID, TAG_ID)
SELECT (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'Spring Boot와 JPA 연동기'),
       (SELECT TAG_ID  FROM TAG  WHERE TAG_NAME  = 'java')
FROM DUAL;

-- XGBoost Basics → ml, xgboost
INSERT INTO POST_TAG (POST_ID, TAG_ID)
SELECT (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'XGBoost Basics'),
       (SELECT TAG_ID  FROM TAG  WHERE TAG_NAME  = 'ml')
FROM DUAL;

INSERT INTO POST_TAG (POST_ID, TAG_ID)
SELECT (SELECT POST_ID FROM POST WHERE POST_SUBJECT = N'XGBoost Basics'),
       (SELECT TAG_ID  FROM TAG  WHERE TAG_NAME  = 'xgboost')
FROM DUAL;


COMMIT;


SELECT * FROM AUTHOR;
SELECT * FROM BLOG;
SELECT * FROM POST;
SELECT * FROM COMM;
SELECT * FROM TAG;
SELECT * FROM POST_TAG;








